;;; Automatically generated on Mon Feb  2 21:41:17 2015
;;; Invoked by winkar@winkar-Lenovo-G480 using 24.4.2
(setq-default kill-ring '(#("0" 0 1 (face font-lock-string-face fontified t)) #("0110000001100000" 0 16 (fontified t face font-lock-string-face))))
(setq-default session-file-alist '(("~/winkar_emacs/.emacs" 2829 3786 1 nil nil 2830 (overwrite-mode)) ("~/workspace/test/test.py" 1 1 1 nil nil 2 (overwrite-mode)) ("~/winkar_emacs/.git/COMMIT_EDITMSG" 10 nil 1 nil nil 11 (overwrite-mode)) ("~/winkar_emacs/README.md" 646 350 1 nil nil 647 (overwrite-mode)) ("~/winkar_emacs/.emacs.d/elpa/elpy-20141031.945/elpy-autoloads.el" 1151 nil 1 nil nil 1151 (overwrite-mode)) ("~/winkar_emacs/.emacs.d/elpa/find-file-in-project-20141214.1952/find-file-in-project-autoloads.el" 897 nil 1 nil nil 897 (overwrite-mode)) ("~/winkar_emacs/.emacs.d/elpa/highlight-indentation-20150122.44/highlight-indentation-autoloads.el" 947 nil 1 nil nil 947 (overwrite-mode)) ("~/winkar_emacs/.emacs.d/elpa/idomenu-20141123.1320/idomenu-autoloads.el" 377 nil 1 nil nil 377 (overwrite-mode)) ("~/winkar_emacs/.emacs.d/elpa/pyvenv-20150110.421/pyvenv-autoloads.el" 1889 nil 1 nil nil 1889 (overwrite-mode)) ("~/winkar_emacs/.emacs.d/elpa/neotree-20150131.808/neotree-autoloads.el" 1254 nil 1 nil nil 1254 (overwrite-mode)) ("~/winkar_emacs/.emacs.d/elpa/elscreen-20140421.414/elscreen-autoloads.el" 648 nil 1 nil nil 648 (overwrite-mode))))
(setq-default file-name-history '("~/Documents/winkar.github.io/_posts/2015-01-24-wechall.md" "~/winkar_emacs/README.md" "~/winkar_emacs/.git/COMMIT_EDITMSG" "~/workspace/test/test.py" "~/winkar_emacs/.emacs" "~/winkar_emacs/.emacs.d/bookmarks" "~/.emacs.d/bookmarks" "~/.emacs.d/music/" "~/Downloads/行走在冷风中.flac" "/home/winkar/winkar_emacs/.git/COMMIT_EDITMSG" "~/.emacs.d/elpa/elpy-20141031.945/elpy-autoloads.el" "~/.emacs.d/elpa/find-file-in-project-20141214.1952/find-file-in-project-autoloads.el" "~/.emacs.d/elpa/highlight-indentation-20150122.44/highlight-indentation-autoloads.el" "~/.emacs.d/elpa/idomenu-20141123.1320/idomenu-autoloads.el" "~/.emacs.d/elpa/pyvenv-20150110.421/pyvenv-autoloads.el"))
(setq-default search-ring '("elpy" "elsc" "el" "powerline" "emac" "pymacs" "elscreen"))
(setq-default regexp-search-ring '("emms" "elpy" "lin" "line" "sublim" "sublime" "elscree"))
(setq-default bookmark-history '(".emacs" "test.py" "2015-01-24-wechall.md"))
(setq-default command-history '((emms) (emms-add-directory "~/.emacs.d/music/") (emms-stop) (evil-set-marker 109) (emms-start) (emms-add-file "~/Downloads/行走在冷风中.flac") (elpy-config) (magit-commit nil) (evil-delete 496 497 (quote line) nil nil) (evil-change 496 502 (quote line) nil nil) (evil-delete 1923 1926 (quote exclusive) nil nil) (evil-delete 1923 1927 (quote exclusive) nil nil) (evil-replace 1914 1915 (quote exclusive) 101) (evil-yank 1800 1870 (quote line) nil nil) (elpy-multiedit-stop) (evil-delete 1848 1852 (quote exclusive) nil nil) (evil-delete 1848 1849 (quote exclusive) nil nil) (evil-delete 1848 1856 (quote exclusive) nil nil) (evil-delete 1800 1801 (quote line) nil nil) (evil-delete 1256 1324 (quote line) nil nil) (evil-record-macro 113) (evil-record-macro 58) (elpy-check nil) (ido-find-file) (evil-use-register 58) (elpy-use-cpython nil)))
(setq-default evil-ex-history '(#("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2))))
(setq-default evil-search-forward-history '("emms" "elpy" "lin" "line" "sublim" "sublime"))
(setq-default extended-command-history '("emms" #("emms-add-directory" 0 1 (face helm-match) 1 2 (face helm-match) 2 3 (face helm-match) 3 4 (face helm-match) 5 6 (face helm-match) 6 7 (face helm-match) 7 8 (face helm-match)) "emms-stop" #("emms-start" 0 1 (face helm-match) 1 2 (face helm-match) 2 3 (face helm-match) 3 4 (face helm-match) 5 6 (face helm-match) 6 7 (face helm-match) 7 8 (face helm-match) 8 9 (face helm-match) 9 10 (face helm-match)) "elpy-config" #("magit-commit" 0 1 (face helm-match) 1 2 (face helm-match) 2 3 (face helm-match) 3 4 (face helm-match) 4 5 (face helm-match) 6 7 (face helm-match) 7 8 (face helm-match) 8 9 (face helm-match)) #("elpy-multiedit-stop" 0 1 (face helm-match) 1 2 (face helm-match) 2 3 (face helm-match) 3 4 (face helm-match) 5 6 (face helm-match) 6 7 (face helm-match) 8 9 (face helm-match) 9 10 (face helm-match)) #("elpy-check" 0 1 (face helm-match) 1 2 (face helm-match) 2 3 (face helm-match) 3 4 (face helm-match) 5 6 (face helm-match) 6 7 (face helm-match) 7 8 (face helm-match) 8 9 (face helm-match) 9 10 (face helm-match)) #("elpy-use-cpython" 0 1 (face helm-match) 1 2 (face helm-match) 2 3 (face helm-match) 3 4 (face helm-match) 5 6 (face helm-match) 6 7 (face helm-match) 7 8 (face helm-match)) #("elpy-use-ipython" 9 16 (face helm-match)) "elpy-goto-definition" "list-packages" "linum-mode" "neotree-projectile-action" #("neotree-toggle" 0 7 (face helm-match)) "neotree-show" #("cd" 0 2 (face helm-match)) #("package-install" 0 1 (face helm-match) 1 2 (face helm-match) 2 3 (face helm-match) 3 4 (face helm-match) 4 5 (face helm-match) 5 6 (face helm-match) 6 7 (face helm-match) 8 9 (face helm-match)) #("load-theme" 0 7 (face helm-match))))
(setq-default helm-c-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (cl-loop for i in command-history unless \.\.\. collect \.\.\.)) (type . sexp)))
(setq-default helm-c-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" . helm-find-many-files) ("Find file as root" . helm-find-file-as-root) ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame) ("Open dired in file's directory" . helm-open-dired) ("Grep File(s) `C-u recurse'" . helm-find-files-grep) ("Zgrep File(s) `C-u Recurse'" . helm-ff-zgrep) ("Pdfgrep File(s)" . helm-ff-pdfgrep) ("Insert as org link" . helm-files-insert-as-org-link) ("Checksum File" . helm-ff-checksum) ("Ediff File" . helm-find-files-ediff-files) ("Ediff Merge File" . helm-find-files-ediff-merge-files) ("Etags `M-., C-u tap, C-u C-u reload tag file'" . helm-ff-etags-select) ("View file" . view-file) ("Insert file" . insert-file) ("Add marked files to file-cache" . helm-ff-cache-add-file) ("Delete file(s)" . helm-delete-marked-files) ("Open file externally (C-u to choose)" . helm-open-file-externally) ("Open file with default tool" . helm-open-file-with-default-tool) ("Find file in hex dump" . hexl-find-file))))
(setq-default helm-ff-history '("/home/winkar/winkar_emacs/"))
(setq-default helm-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (cl-loop for i in command-history unless \.\.\. collect \.\.\.)) (type . sexp)))
(setq-default helm-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" . helm-find-many-files) ("Find file as root" . helm-find-file-as-root) ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame) ("Open dired in file's directory" . helm-open-dired) ("Grep File(s) `C-u recurse'" . helm-find-files-grep) ("Zgrep File(s) `C-u Recurse'" . helm-ff-zgrep) ("Pdfgrep File(s)" . helm-ff-pdfgrep) ("Insert as org link" . helm-files-insert-as-org-link) ("Checksum File" . helm-ff-checksum) ("Ediff File" . helm-find-files-ediff-files) ("Ediff Merge File" . helm-find-files-ediff-merge-files) ("Etags `M-., C-u tap, C-u C-u reload tag file'" . helm-ff-etags-select) ("View file" . view-file) ("Insert file" . insert-file) ("Add marked files to file-cache" . helm-ff-cache-add-file) ("Delete file(s)" . helm-delete-marked-files) ("Open file externally (C-u to choose)" . helm-open-file-externally) ("Open file with default tool" . helm-open-file-with-default-tool) ("Find file in hex dump" . hexl-find-file))))
(setq-default minibuffer-history '("emms" "test.py" "emmsadd" "ems" "emmsstart" "emmst" "emmsplaylist" "elpy" ".emacs" "elpy-config" " *NeoTree*" "magitcom" "elpymuti" "elpycheck" "ido-find" "elpyuse" "ipython" "neotr" "elpyt" "elpyg-" "*Packages*" "list" "list-" "listp" "line"))
(setq-default occur-collect-regexp-history '("\\1"))
(setq-default yes-or-no-p-history '("yes"))
